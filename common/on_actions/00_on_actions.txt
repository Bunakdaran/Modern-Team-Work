#When adding effects directly in on_actions always consider if it would be best to do so through a scripted effect. on_actions with a lot of script in them are harder to get an overview of.

# country
on_startup = {
	et_setup_effect = yes
	
	if = {
		limit = {
			#OR = {
			#	started_in = 2022.2.22
			#	started_in = 2022.2.23
			#	started_in = 2023.5.16
			#	started_in = 2023.12.23
			#	started_in = 2024.8.21
			#	started_in = 2024.10.1
			#	started_in = 2025.8.21
			#}
			#NOT = { is_year = 2026 }
			#NOT = { has_global_flag = fixed_manpower1 }
			NOT = { has_country_flag = started_game }
		}
		add_tank_script_effect = yes
	}
	if = {
		limit = {
			#NOT = { is_year = 2026 }
			NOT = { has_country_flag = started_game }
		}
		#modern_setup_effect = yes
		country_event = {
			id = trade_discover.1
		}
	}

	#if = {
	#	limit = {
	#		is_year = 2021
	#		NOT = { is_year = 2024 }
	#	}
	#	every_province = {
	#		limit = {
	#			owned_by = CHN
	#		}
	#		province_event = { id = start_game.1 }
	#	}
	#}
	#if = {
	#	limit = {
	#		is_year = 2021
	#		NOT = { is_year = 2024 }
	#	}
	#	country_event = {
	#		id = trade_discover.2
	#	}
	#}
	######## in the next game should be delete
	if = { 
		limit = { has_country_modifier = european_union }
		positive_eu_set_ziro = yes
	}
	#if = {
	#	limit = { 
	#		tag = SPA
	#		is_year = 2065
	#		NOT = { is_year = 2066 }
	#	}
	#	set_variable = {
	#		which = positive_EU value = 0
	#	}
	#	add_country_modifier = {
	#		name = european_union
	#		duration = -1
	#	}
	#	not_eu_member = yes
	#}
	#######################################################
	if = {
		limit = {
			has_country_modifier = european_union
		}
		every_owned_province = {
			limit = {
				has_province_flag = capital_europa
			}
			clr_province_flag = capital_europa
		}
		capital_scope = {
			set_province_flag = capital_europa
		}
	}
	################################################################
	if = {
		limit = {
			NOT = { has_country_modifier = european_union }
			is_part_of_hre = yes
		}
		capital_scope = {
			set_province_flag = capital_europa
		}
	}
	#if = {  
	#	limit = { 
	#		ai = no 
	#		NOT = { is_year = 2024 } 
	#	}
	#	country_event = {
	#		id = startup.1
	#	}
	#}
	if = {
		limit = { 
			NOT = { has_country_modifier = european_union } 
			NOT = { has_country_modifier = european_leader }
			any_owned_province = { has_province_flag = capital_europa }
		}
		not_eu_member = yes
	}
	if = {
		limit = {
			religion_group = muslim
			NOT = { has_country_flag = started_game }
			#OR = {
			#	started_in = 2022.2.22
			#	started_in = 2022.2.23
			#	started_in = 2023.5.16
			#	started_in = 2023.12.23
			#	started_in = 2024.8.21
			#	started_in = 2024.10.1
			#	started_in = 2025.8.21
			#}
			#NOT = { is_year = 2026 }
			#NOT = { has_global_flag = fixed_manpower1 }
		}
		country_event = {
			id = ideology_of_islam.1
		}
			
	}
	#if = {
	#	limit = {
	#		is_year = 2021
	#		NOT = { is_year = 2024 }
	#		NOT = { tag = CHN }
	#		NOT = { tag = USA }
	#		NOT = { tag = FRM }
	#		NOT = { tag = IRA }
	#		NOT = { tag = SAU }
	#		NOT = { tag = WSH }
	#		NOT = { tag = ROJ }
	#		NOT = { tag = KRD }
	#		NOT = { tag = SOU }
	#		NOT = { tag = ISR }
	#		NOT = { tag = ABK }
	#	}
	#	country_event = {
	#		id = opinion2022.26
	#	}
	#}
	if = {
		limit = {
			#OR = {
			#	started_in = 2022.2.22
			#	started_in = 2022.2.23
			#	started_in = 2023.5.16
			#	started_in = 2023.12.23
			#	started_in = 2024.8.21
			#	started_in = 2024.10.1
			#	started_in = 2025.8.21
			#}
			#NOT = { is_year = 2026 } 
			#NOT = { has_global_flag = fixed_manpower1 }
			NOT = { has_country_flag = started_game }
		}
		atomic_bomb_script_effect = yes
		transport_script_effect = yes
		navy_scripted_effect = yes
		missile_script_effect = yes
		capital_script_effect = yes
		add_opinion_script_effect = yes
		transport_ai_script_effect = yes
		capital_of_leader_of_eu = yes
		GPS_script_effect = yes
		manpower_script_effect = yes
		eu_script_effect = yes
		rivel_set_script_effect = yes
		government_set_script_effect = yes
		oil_product_script_effect = yes
		oil_bought_script_effect = yes
		missile_script_effect_zero = yes
		#USA = {
		#	country_event = {
		#		id = opinion2022.27
		#	}
		#}
		#IRA = {
		#	country_event = {
		#		id = opinion2022.28
		#	}
		#}
		#CHN = {
		#	country_event = {
		#		id = opinion2022.29
		#	}
		#}
		#FRM = {
		#	country_event = {
		#		id = opinion2022.30
		#	}
		#}
		#ISR = {
		#	country_event = {
		#		id = opinion2022.31
		#	}
		#}
		#SAU = {
		#	country_event = {
		#		id = opinion2022.32
		#	}
		#}
	}
	if = {
		limit = {
			#is_year = 2021
			#NOT = { is_year = 2026 }
			NOT = { has_country_flag = started_game }
			NOT = { has_global_flag = fixed_manpower1 }
		}
		
		4860 = { add_building = road add_building = highway }
		1854 = { add_building = road add_building = highway }
		4466 = { add_building = road add_building = highway }
		4861 = { add_building = road add_building = highway }
		4874 = { add_building = road add_building = highway }
		2151 = { add_building = road add_building = highway }
		4862 = { add_building = road add_building = highway }
	}

	emperor = {
		save_global_event_target_as = Emperor
	}
	if = {
		limit = {
			is_emperor_of_china = yes
		}
		save_global_event_target_as = EmperorOfChina
	}
	events = {
		muslim_school_events.20 #Pick School
	}
	if = {
		limit = {
			has_dlc = "Cradle of Civilization"
			has_country_modifier = tur_janissary
		}
		remove_country_modifier = tur_janissary
	}
	initialize_schools_effect = yes #This is only used here but is used for readability of on_action file.

	#if = {
	#	limit = {
	#		NOT = { has_global_flag = fixed_manpower1 }
	#	}
	#	USA = {
	#		country_event = {
	#			id = fix_manpower.3
	#			days = 10
	#		}
	#	}
	#}
	if = {
		limit = {
			NOT = { has_country_flag = started_game }
		}
		set_country_flag = started_game
	}
}

# country
on_religion_change = {
	on_religion_change_effect = yes
	on_religion_change_estate_privileges_effect = yes
	judaism_on_religion_change_effect = yes
	
	events = {
		muslim_school_events.20 #Pick School
	}
}

# country.
on_secondary_religion_change = {
	# Done from code: add_prestige = -50 (Define: CHANGE_SECONDARY_PRESTIGE_HIT)
	every_owned_province = {
		limit = { has_province_modifier = tengri_monastic_order }
		remove_province_modifier = tengri_monastic_order
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_shiite_settled_in_capital }
		remove_province_modifier = tengri_shiite_settled_in_capital
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_insincere_leadership }
		remove_province_modifier = tengri_insincere_leadership
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_religious_influx }
		remove_province_modifier = tengri_religious_influx
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_ruler_questioned }
		remove_province_modifier = tengri_ruler_questioned
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_strengthened_local_clans }
		remove_province_modifier = tengri_strengthened_local_clans
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_growing_cities }
		remove_province_modifier = tengri_growing_cities
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_christian_mission }
		remove_province_modifier = tengri_christian_mission
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_unchristian_values }
		remove_province_modifier = tengri_unchristian_values
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_monastic_order }
		remove_province_modifier = tengri_monastic_order
	}
	every_owned_province = {
		limit = { has_province_modifier = hindufication }
		remove_province_modifier = hindufication
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_influx_of_monks }
		remove_province_modifier = tengri_influx_of_monks
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_abandoning_the_old_ways }
		remove_province_modifier = tengri_abandoning_the_old_ways
	}
	remove_country_modifier = tengri_devout_muslim
	remove_country_modifier = tengri_confucian_elites_alienated
	remove_country_modifier = tengri_confucian_titles
	remove_country_modifier = tengri_traditionalists_strengthened
	remove_country_modifier = tengri_confucian_nobles
	remove_country_modifier = tengri_pali_legal_traditions
	remove_country_modifier = tengri_religious_pilgrimages
	remove_country_modifier = tengri_monks_in_capital
	remove_country_modifier = tengri_influx_of_monks
	remove_country_modifier = tengri_shiite_immigration
	remove_country_modifier = support_of_the_khojas
	remove_country_modifier = black_shamanism_modifier
	remove_country_modifier = tengri_animist_pantheon
	remove_country_modifier = zoroastrian_traders
	remove_country_modifier = spread_of_tengri_tea_ceremony
	remove_country_modifier = tengri_tea_ceremony
	remove_country_modifier = tengri_japanese_swordsmithing
	remove_country_modifier = tengri_bow_and_arrow_defended
	remove_country_modifier = tengri_support_of_shamans
	remove_country_modifier = tengri_hindu_conflict
	remove_country_modifier = tengri_hindu_syncretism
	remove_country_modifier = tengri_devout_christian_ruler
	remove_country_modifier = tengri_personal_confessor
	remove_country_modifier = tengri_confucian_administrators
	remove_country_modifier = tengri_traditional_elites_alienated
	remove_country_modifier = tengri_jihad
	remove_country_modifier = tengri_stood_up_for_yassa
	remove_country_modifier = tengri_sufi_teacher
	remove_country_modifier = tengri_qadi
	remove_country_modifier = tengri_religious_influx
	remove_country_modifier = tengri_ibadi_scholars
	remove_country_modifier = tengri_clergy_conflicts
	remove_country_modifier = tengri_shamans_spurned
	clr_country_flag = khojas_established
	clr_country_flag = tengri_christian_devout_court
	clr_ruler_flag = tengri_muslim_ruler_questioned
	if = {
		limit = {
			check_variable = { which = khojas_retained value = 1 }
		}
		set_variable = {
			which = khojas_retained value = 0
		}
	}
}

# country. Spawned when Enforcing Rebel Demands through a Support Rebels-war.
on_enforce_rebel_demands = {
	# ROOT = The winning country
	# FROM = The loosing country
	set_country_flag = helped_rebels_win_war
}

# country
on_colonial_liberation = {
}

# country
on_colonial_reintegration = {
	
}

# country
on_peace_actor = {
	
}

# country
on_peace_recipient = {
	#if = {
	#	limit = {
	#		has_country_flag = can_gain_legendary_pirates_flag
	#		NOT = { has_ruler_flag = historical_pirate }
	#		has_government_attribute = is_pirate_republic_reform
	#		FROM = { total_development = ROOT }
	#	}
	#	random = {
	#		chance = 5
	#		country_event = {
	#			id = pirates.25
	#		}
	#	}
	#}
}

# country
# root = winning country, from = loser country
on_war_won = {
	
	if = {
		limit = {
			is_part_of_hre = yes
			FROM  = { is_part_of_hre = yes }
		}
		ROOT = { save_global_event_target_as = hre_winner }
		FROM = { save_global_event_target_as = hre_loser }
		random_known_country = {
			limit = {
				has_reform = free_city
				NOT = {
					prestige = 40
				}
				NOT = {
					has_country_modifier = fc_treatyconference_timer
				}
			}
			add_country_modifier = {
				name = fc_treatyconference_timer
				duration = 3650
				hidden = yes
			}
		}
	}
	if = {
		limit = {
			ROOT = { 
				tag = SWE
				has_country_modifier = swe_vasa_leads_the_rebellion
				is_subject = no
			}
			FROM = { tag = DAN }
		}
		country_event = {
			id = flavor_swe.111
		}
	}
	if = {
		limit = {
			ROOT = { 
				tag = SWE
				has_country_modifier = swe_any_vasa_leads_the_rebellion
				is_subject = no
			}
			FROM = { tag = DAN }
		}
		country_event = {
			id = flavor_swe.105
		}
	}
	if = {
		limit = {
			ROOT = { 
				tag = SWE
				has_country_flag = swe_declared_independence_war
				is_subject = no
			}
			FROM = { tag = DAN }
		}
		country_event = {
			id = flavor_swe.121
		}
	}
	change_variable = {
		which = num_of_wars_won_var
		value = 1
	}
}

# country
# root = winning country, from = loser country
on_main_war_won = {
	on_main_war_won_effect = yes
	if = {
		limit = {
			ROOT = {
				religion = jewish
				has_church_aspect = judaism_purim_teachings_aspect
			}
		}
		add_church_power = 10
	}
	if = {
		limit = {
			#has_country_flag = forcing_government
			FROM = { government = ROOT }
		}
		#clr_country_flag = forcing_government
		add_opinion = { who = FROM modifier = friendly_government }
		FROM = {
			add_opinion = { who = ROOT modifier = friendly_government }
			set_ai_attitude = {
				attitude = attitude_friendly
				who = ROOT
				locked = no
			}
		}
	}
	if = {
		limit = { 
			ROOT = { is_rival = FROM }  
			ROOT = { NOT = { religion_group = FROM } }
			current_age = high_middle_ages
		}
		set_country_flag = won_against_rival_of_other_religion_group
	}
	if = {
		limit = { 
			current_age = great_war_age
			FROM = { is_great_power = yes }
		}
		set_country_flag = won_against_great_power
	}
	if = {
		limit = { current_age = dark_age }
		change_variable = {
			which = num_of_wars_won
			value = 1
		}
	}
	events = {
		native_americans.7
		#flavor_kor.15
	}
}

# country
# root = loser country, from = winner country
on_war_lost = {
		
	ROOT = { country_event = { id = flavor_cri.6 } }
	if = {
        limit = {
            government = republic
            is_lesser_in_union = yes
		}
		change_government_to_monarchy = yes
    }
	if = {
		limit = {
			FROM = { is_emperor = yes }
			NOT = { has_country_flag = reined_in_for_shadow_kingdom }
			NOT = { has_global_flag = italians_leave_hre }
			is_emperor = no
			is_part_of_hre = yes
			OR = {
				capital_scope = { region = italy_region }
				AND = {
					culture_group = latin
					any_owned_province = {
						region = italy_region
					}
				}
			}
		}
		set_country_flag = reined_in_for_shadow_kingdom
	}
	add_country_modifier = {
		name = just_lost_war_timer
		duration = 10
		hidden = yes
	}
}
on_main_war_lost = {
	#events = {
	#	flavor_kor.15
	#	flavor_tur.300 #Defeat of the Ottomans
	#}
}
on_separate_war_lost = {
}
# country
# root = winning country, from = loser country
on_battle_won_country = {
	#on_battle_ended_effect = yes
	on_battle_won_country_effect = yes
	if = {
		limit = {
			ROOT = {
				tag = ALB
				NOT = { has_country_flag = albanian_victory }
			}
		}
		ROOT = { 
			set_country_flag = albanian_victory 
			add_war_exhaustion = -0.05

		}
	}
	if = {
		limit = { current_age = great_war_age }
		change_variable = {
			which = num_of_battles_won
			value = 1
		}
	}
	count_won_battles_and_reward_at_end = {
		counting_flag = teu_crusader_battle_counter
		max_value = 20
		effect = "
			country_event = {
				id = flavor_teu.12
			}
		"
	}
	count_won_battles_and_reward_at_end = {
		counting_flag = has_rus_kill_counter
		max_value = 40
		effect = "set_country_flag = rus_finished_kill_mission"
	}
}

# country
# root = loser country, from = winner country
on_battle_lost_country = {
	battle_cult_spreading_effect = yes #Scripted effect for fetishist cult mechanics.
	random_events = {
		90 = 0
		10 = friendship_events.1 #Historical Friendship Broken
	}
}

# province
# root = location, from = loser country
on_battle_won_province = {	
}

#Unit Scope OnAction for Battle Won
on_battle_won_unit = {
	if = {
		limit = {
			unit_owner = { ai = no } #Scopes to Unit Owner from Unit Scope
			general_with_steam_name = yes #Unit Scope Trigger
		}
		unit_owner = { set_country_flag = general_with_steam_name_won_battle }
	}
	if = {
		limit = {
			general_with_name = "Damarwulan"
		}
		unit_owner = {
			change_variable = {
				which = DamarwulanWinVariable 
				value = 1
			}
		}
	}
	if = {
		limit = {
			unit_owner = {
				has_government_attribute = winning_battles_increases_legitimacy
			}
			is_ruler_commanding_unit = yes
		}
		unit_owner = {
			add_legitimacy = 0.5
			add_devotion = 0.5
			add_republican_tradition = 0.1
			add_revolutionary_zeal_or_absolutism = { amount = 0.1 }
		}
	}
	if = {
		limit = {
			general_with_name = "Jean Bureau"
		}
		unit_owner = {
			change_variable = {
				which = jean_bureau_battles_won 
				value = 1
			}
		}
	}
}

# #Unit Scope OnAction for Battle Lost
on_battle_lost_unit = {
	on_battle_lost_unit_effect = yes
    if = {
        limit = {
            unit_owner = {
                tag = MNG
                has_ruler_flag = mng_militry_incompetence
            }
            is_ruler_commanding_unit = yes
			enemy_unit = {
				unit_owner = {
					tag = OIR
				}
			}
        }
        OIR = {
            country_event = { id = flavor_oir.2 }
        }
    }
}

# province
# root = location, from = country doing it
on_added_to_trade_company ={
	if = { 
		limit = { 
			owner = { has_country_flag = adding_provinces_to_trade_c_merc_prod_flag } 
		}
		owner = { add_mercantilism = 1 } 
		add_base_production = 1 
	}
}

# province
# root = location, from = country doing it
on_removed_from_company ={
	if = { 
		limit = { 
			owner = { has_country_flag = adding_provinces_to_trade_c_merc_prod_flag } 
		}
		owner = { add_mercantilism = -1 } 
		add_base_production = -1 
	}
}

# province
# root = location, from = country doing it
on_company_formed ={

}

# province
# root = location, from = country doing it
on_company_disolved ={

}

# province
# root = location, from = winner country
on_battle_lost_province = {
}

# country
# root = winning country, from = location
on_siege_won_country = {
	
	if = {
		limit = {
			ROOT = {
				religion = jewish
				has_church_aspect = judaism_remember_passover_aspect
			}
			FROM = {
				owner = {
					war_with = ROOT
				}
				fort_level = 1
			}
		}
		ROOT = {
			add_church_power = 5
		}
	}
	grant_manpower_from_besieging_fort = yes
	events = {
		tyw_events.14 # Fall of Prague in Religious War
		flavor_oir.5 # Oirats capture Beijing
		flavor_lna.1 # Emerald Buddha
		flavor_son.14 # Djenne surrenders to Songhai Trigger
		flavor_teu.25 # Payback for the Hussite Wars
		#flavor_tur.240 # Collapse of teh Mamluks
		#flavor_kor.16 # Tripitaka Koreana
		#flavor_tur.211 # Fall of Vienna
	}
	random_events = {
		100 = 0
		10 = army_professionalism_events.1 #City Sacked
		20 = et_satsana_phi.4
	}
}

# country
# root = losing country, from = location
on_siege_lost_country = {
}

# province
# root = location, from = losing country
on_siege_won_province = {
	if = {
		limit = {
			superregion = china_superregion
			controller = {
				has_government_attribute = has_unify_china_cb
				
				NOT = { is_core = ROOT }
			}
		}
		controller = { 
			add_territorial_core = ROOT
			if = {
				limit = { is_claim = ROOT}
				remove_claim = ROOT
			}
		}
	}
}

# province
# root = location, from = winning country
on_siege_lost_province =  {
	events = {
		et.12
		et.30
	}
}

# province
# root = location, from = country that abandons colony
# Fired right before the colony is abandoned.
on_abandon_colony = {
}

# province
# root = location, from = country that owns it
# Fired right after the great project is constructed
on_great_project_constructed = {
}

# OBS: Consider that the following on_actions can be called for Personal Union juniors as well.
# country
on_new_monarch = {
	on_new_monarch_effect = yes
	crimean_succession_effect = yes #Scripted effect
	slesvig_question_effect = yes #Scripted effect
	# ambrosian_republic_effect = yes
	succession_culture_religion_effect = yes
	sheik_ul_islam_effect = yes
	hab_remove_mission_mods_if_not_emperor_effect = yes
	thu_remain_von_wettin_effect = yes
	ladislaus_postumus_union_effect = yes
	events = {
		muslim_school_events.20 #No Religious School
		ideology_of_islam.1
		et_government_event.1 # Fascist new ruler event
		et_government_event.2 # Communist new ruler event
		#flavor_rus.128			# Peter the Great
		#flavor_rus.131			# Streltsy Payment
		#flavor_gbr.102			# Religious Stance of the King
	}
}

on_new_consort = {
	if = {
		limit = { has_ruler_flag = had_10_years_anniversary }
		clr_ruler_flag = had_10_years_anniversary
	}
	if = {
		limit = { has_ruler_flag = had_20_years_anniversary }
		clr_ruler_flag = had_20_years_anniversary
	}
	if = {
		limit = { has_ruler_flag = consort_had_affection_of_ruler }
		clr_ruler_flag = consort_had_affection_of_ruler
	}
	if = {
		limit = { has_country_modifier = sought_after_bachelor }
		remove_country_modifier = sought_after_bachelor
	}
	random_events = {
		1000 = 0
		200 = et_satsana_phi.3
	}
}

# country
on_monarch_death = {
	
	if = {
		limit = { has_country_modifier = sought_after_bachelor }
		remove_country_modifier = sought_after_bachelor
	}
	if = {
		limit = { has_government_attribute = no_stability_loss_on_monarch_death }
		add_stability = 1
	}
	burgundian_inheritance_start_effect = yes
	ladislaus_postumus_king_died_effect = yes
	joan_de_trastamara_king_died_effect = yes
	events = {
		et_islam.1
		et_islam.4
		et_islam.6
		et_islam.7
		et_islam.9
		et_islam.12
		government_events.3	# Election of a new Ruler
	}
}

# country
on_regent = {
	if = {
		limit = {
			NOT = { has_global_flag = death_of_haji_giray } #Also set in history.
			tag = CRI
			OR = {
				NOT = { exists = TUR }
				is_subject = yes
				TUR = { NOT = { num_of_cities = ROOT } }
				TUR = { is_subject = yes }
				TUR = { NOT = { num_of_ports = 1 } }
			}
		}
		set_global_flag = death_of_haji_giray
	}
}

# country
on_extend_regency = {
}

# country
on_new_term_election = {
	events = {
		700		# Election event
		elections.720		# Dutch Republic
		elections.800	# Lottery election
		
		et_political.1
	}
}

# country
on_death_election = {
	#if = {
	#	limit = {
	#		has_government_attribute = is_pirate_republic_reform
	#	}
	#	set_country_flag = pirate_death_election
	#	country_event = { id = pirates.1 }
	#}
	if = {
		limit = { has_reform = presidential_despot_reform }
		remove_government_reform = presidential_despot_reform
	}
	events = {
		701		# Election event
		elections.721		# Dutch Republic
		elections.800	# Lottery election
		et_political.2
	}
}

# country
on_death_foreign_slave_ruler = {
}

# country
on_replace_governor = {
	events = {
		elections.707
	}
}


# country
on_bankruptcy = {
	set_variable = {
		which = bank_deposit
		value = 0
	}
}

# country (country annexing, root = target)
on_diplomatic_annex = {
	events = {
		610
		appanages_event.1
	}
}

# country
on_heir_death = {
	on_heir_disinherited_or_death_effect = yes
	ladislaus_postumus_heir_died_effect = yes
	joan_de_trastamara_heir_died_effect = yes
}

# country
on_queen_death = {

	if = {
		limit = { has_consort_flag = 10_years_anniversary }
		set_ruler_flag = had_10_years_anniversary
	}
	if = {
		limit = { has_consort_flag = 20_years_anniversary }
		set_ruler_flag = had_20_years_anniversary
	}
	if = {
		limit = { has_consort_flag = consort_has_affection_of_ruler }
		set_ruler_flag = consort_had_affection_of_ruler
	}

	if = {
		limit = {
			has_regency = no
			NOT = { has_ruler_flag = widow_widower }
		}
		set_ruler_flag = widow_widower
	}
	if = {
		limit = { has_consort_regency = no }
		random_owned_province = {
			limit = { has_province_modifier = domain_of_spouses_family }
			remove_province_modifier = domain_of_spouses_family
		}
	}
	if = {
		limit = { has_ruler_flag = accepted_help_from_spouses_family }
		clr_ruler_flag = accepted_help_from_spouses_family
	}
	if = {
		limit = { has_ruler_flag = helped_spouses_family }
		clr_ruler_flag = helped_spouses_family
	}
	if = {
		limit = { has_ruler_flag = refused_to_help_spouses_family }
		clr_ruler_flag = refused_to_help_spouses_family
	}
	if = {
		limit = { has_ruler_flag = has_lowborn_consort }
		random_owned_province = {
			limit = { has_province_modifier = home_of_consort }
			remove_province_modifier = home_of_consort
		}
	}
	if = {
		limit = { has_ruler_flag = has_lowborn_consort }
		clr_ruler_flag = has_lowborn_consort
	}
	if = {
		limit = { has_country_modifier = consort_adm_advice }
		remove_country_modifier = consort_adm_advice
	}
	if = {
		limit = { has_country_modifier = consort_dip_advice }
		remove_country_modifier = consort_dip_advice
	}
	if = {
		limit = { has_country_modifier = consort_mil_advice }
		remove_country_modifier = consort_mil_advice
	}
	if = {
		limit = { has_country_modifier = without_spouse_advice }
		remove_country_modifier = without_spouse_advice
	}
	if = {
		limit = { has_ruler_modifier = affectionate_royal_couple }
		remove_country_modifier = affectionate_royal_couple
	}
	if = {
		limit = { has_ruler_modifier = bav_woman_scorned_mod }
		remove_country_modifier = bav_woman_scorned_mod
	}
	if = {
		limit = { has_ruler_modifier = bav_building_wife_church }
		remove_country_modifier = bav_building_wife_church
	}
	clr_ruler_flag = marriage_length
}

# country
on_new_heir = {
	if = {
		limit = { has_any_heir_cult_active = yes }
		remove_heir_cult = yes
	}
	if = {
		limit = {
			has_country_flag = had_bmv
		}
		clr_country_flag = had_bmv
	}
}

# country
on_weak_heir_claim = {
	events = {
		flavor_sca.2
		theocracy.1
	}
}

# country : no heir in theocracy
on_heir_needed_theocracy = {
	events = {
		theocracy.1
	}
}

# Emperor from same dynasty
on_successive_emperor = {
	emperor = {
		save_global_event_target_as = Emperor
	}
	events = {
		900
	}
}

# Called whenever a new emperor is elected
# FROM = Previous Emperor
# ROOT = New Emperor 
on_emperor_elected = {
	every_elector = {
		if = {
			limit = {
				preferred_emperor = root
			}
			change_variable = {
				which = supported_successive_emperors
				value = 1
			}
		}
		else = {
			set_variable = {
				which = supported_successive_emperors
				value = 0
			}
		}
	}

	emperor = {
		save_global_event_target_as = Emperor
	}
	if = {
		limit = { has_country_flag = got_promised_holstein_to_the_empire }
		clr_country_flag = got_promised_holstein_to_the_empire
	}
	FROM = {
		if = {
			limit = { has_country_modifier = diet_occupied }
			remove_country_modifier = diet_occupied
			ROOT = {
				add_country_modifier = { name = diet_occupied duration = -1 }
			}
		}
		if = {
			limit = {
				any_country = {
					reverse_has_opinion_modifier = {
						modifier = opinion_imperial_diplomacy
						who = prev
					}
				}
			}
			every_country = {
				limit = {
					reverse_has_opinion_modifier = {
						modifier = opinion_imperial_diplomacy
						who = prev
					}
				}
				reverse_remove_opinion = {
					modifier = opinion_imperial_diplomacy
					who = prev
				}
				ROOT = {
					add_opinion = {
						modifier = opinion_imperial_diplomacy
						who = prev
					}
				}
			}
		}
	}
}

# HRE Prince released by the emperor
on_released_hre_member = {
	
}

# HRE Prince converts to non-Emperor religion
on_hre_member_false_religion = {
	
}

# HRE Prince converts to Emperor religion
on_hre_member_true_religion = {
	
}

# Emperor wins HRE defensive war
on_hre_wins_defensive_war = {
	
}

# HRE member annexed by non-HRE country
on_hre_member_annexed = {
	
}

# HRE member released from non-HRE vassalage
on_hre_released_vassal = {
	
}

# HRE member transferred from non-HRE vassalage to Emperor
on_hre_transfered_vassal = {
	
}

# Emperor coming to the defense of a HRE member
on_hre_defense = {
	
}

# Emperor NOT coming to the defense of a HRE member
on_hre_non_defense = {
	events = {
		909
	}
}

# HRE Member takes a HRE province from an outs100e country in a peace (province scope)
on_hre_province_reconquest = {
	
}

on_lock_hre_religion = {
	
}

on_change_hre_religion = {
	
}

on_hre_religion_white_peace = {
	
}

# When a non-native changes government type
on_government_change = {
	#modern_name_effect = yes
	clr_country_flag = pirate_mutineer_council
	clr_country_flag = caretaker_revolutionary_government
	if = {
		limit = {
			NOT = { government = monarchy }
			any_owned_province = {
				has_province_modifier = domain_of_spouses_family
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = domain_of_spouses_family }
			remove_province_modifier = domain_of_spouses_family
		}
	}
	if = {
		limit = {
			NOT = { government = monarchy }
			any_owned_province = {
				has_province_modifier = home_of_consort
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = home_of_consort }
			remove_province_modifier = home_of_consort
		}
	}
	if = {
		limit = {
			OR = {
				tag = ENG
				tag = GBR
			}
			any_owned_province = {
				has_province_modifier = rotten_borough
			}
		}
		every_owned_province = {
			limit = {
				has_province_modifier = rotten_borough
			}
			remove_province_modifier = rotten_borough
		}
	}
	if = {
		limit = { has_country_modifier = the_reign_of_terror }
		remove_country_modifier = the_reign_of_terror
	}
	if = {
		limit = {
			has_global_flag = great_peasants_war_flag
			is_part_of_hre = yes
			has_government_attribute = is_peasants_republic
		}
		1 = {
			change_variable = {
				which = GPW_counting_variable
				value = -3
			}
		}
	}
}

# When a native changes government after filling all their advancement groups.
on_native_change_government = {
}

# Nation is integrated after being in union
on_integrate = {
	
}

# Nation annexed.
# FROM is the nation being annexed
on_annexed = {
	on_annexed_estate_privileges_effect = yes
	FROM = {
		if = {
			limit = { is_emperor_of_china = yes }
			dismantle_empire_of_china = yes
			set_global_flag = empire_of_china_dismantled
		}
		if = {
			limit = { has_country_modifier = legatus_natus }
			remove_country_modifier = legatus_natus
			set_global_flag = no_legatus_natus
		}
		if = {
			limit = { has_country_modifier = primas_germaniae }
			remove_country_modifier = primas_germaniae
			set_global_flag = no_primas_germaniae
		}
	}
}

# When the chinese empire gets dismantled (e.g. when the emperor is annexed)
# FROM = Emperor, ROOT = Current Nation
on_chinese_empire_dismantled = {
	clear_global_event_target = EmperorOfChina
	
}

# When a nation gains the Mandate of Heaven (becomes the Emperor of China)
# FROM = Old Emperor, ROOT = New Emperor
on_mandate_of_heaven_gained = {
	save_global_event_target_as = EmperorOfChina
	if = {
		limit = {
			technology_group = nomad_group
		}
		change_technology_group = chinese
		change_unit_type = chinese
	}
	if = {
		limit = { 
			has_dlc = "Domination" 
			NOT = { primary_culture = mongol }
			NOT = { primary_culture = chahar }
			NOT = { primary_culture = khalkha }
			NOT = { primary_culture = oirats }
		}
		swap_non_generic_missions = yes 
	}
	if = {
		limit = {
			OR = {
				NOT = { government = monarchy }
				government = tribal
			}
		}
		change_government_to_monarchy = yes
	}
	add_government_reform = celestial_empire
	set_mandate = 60
	set_meritocracy = 60
	add_country_modifier = {
		name = new_mandate_holder
		duration = 9125
	}
	1816 = {
		if = {
			limit = {
				NOT = { owned_by = root }
				NOT = { is_core = root }
			}
			add_core = root
		}
	}
	1821 = {
		if = {
			limit = {
				NOT = { owned_by = root }
				NOT = { is_core = root }
			}
			add_core = root
		}
	}
	667 = {
		if = {
			limit = {
				NOT = { owned_by = root }
				NOT = { is_core = root }
			}
			add_core = root
		}
	}
	china_superregion = {
		limit = {
			NOT = { is_core = ROOT }
		}
		add_permanent_claim = ROOT
	}
	if = {
		limit = {
			has_dlc = "Mandate of Heaven"
		}
		remove_faction = temples
		remove_faction = enuchs
		remove_faction = bureaucrats
	}
	if = {
		limit = {
			has_country_modifier = lost_mandate_of_heaven
		}
		remove_country_modifier = lost_mandate_of_heaven
	}
}

# When a nation loses the Mandate of Heaven
# FROM = New Emperor, ROOT = Old Emperor
on_mandate_of_heaven_lost = {
	remove_government_reform = celestial_empire
	set_government_rank = 2
	add_country_modifier = {
		name = lost_mandate_of_heaven
		duration = 7300	# 20 years
	}
	if = {
		limit = { has_dlc = "Mandate of Heaven" }
		swap_non_generic_missions = yes 
	}
	add_stability = -2
	china_superregion = {
		limit = {
			is_permanent_claim = ROOT
		}
		if = {
			limit = { is_claim = ROOT}
			remove_claim = ROOT
		}
	}
	if = {
		limit = {
			has_country_modifier = new_mandate_holder
		}
		remove_country_modifier = new_mandate_holder
	}
	if = {
		limit = { has_country_modifier = jap_era_tranquil_sun_modifier } 
		remove_country_modifier = jap_era_tranquil_sun_modifier 
	}
}

on_embrace_revolution = {
	#if = {	
	#	limit = {
	#		any_subject_country = {
	#			has_country_modifier = colony_inspired_by_revolution
	#		}
	#	}
	#	every_subject_country = {
	#		remove_country_modifier = colony_inspired_by_revolution
	#	}
	#}
	#if = {
	#	limit = { NOT = { government = republic } }
	#	change_government_to_republic = yes
	#}
	#if = {
	#	limit = { 
	#		revolution_target_exists = no
	#		is_great_power = yes
	#	}
	#	set_revolution_target = ROOT
	#	add_government_reform = revolutionary_republic_reform
	#	if = {
	#		limit = {
	#			any_country = {
	#				has_country_flag = last_revolutionary_country
	#			}
	#		}
	#		every_country = {
	#			limit = {
	#				has_country_flag = last_revolutionary_country
	#			}
	#			clr_country_flag = last_revolutionary_country
	#		}
	#	}
	#}
	#else = {
	#	add_government_reform = junior_revolutionary_republic_reform
	#}
	#if = {
	#	limit = { has_reform = parliamentary_reform }
	#	remove_government_reform = parliamentary_reform
	#}
	#kill_ruler = yes
	#set_country_flag = revolutionary_republic_flag
	#set_country_flag = had_revolution
}

# THIS = Revolutionary country being beaten, FROM = Country enforcing the peace treaty
on_dismantle_revolution = {
	#if = {
	#	limit = {
	#		any_country = {
	#			has_country_flag = last_revolutionary_country
	#		}
	#	}
	#	every_country = {
	#		limit = {
	#			has_country_flag = last_revolutionary_country
	#		}
	#		clr_country_flag = last_revolutionary_country
	#	}
	#}
	#set_country_flag = last_revolutionary_country
}

# province
on_adm_development = {
	on_adm_development_effect = yes
	if = {
		limit = { owner = { has_country_flag = enable_supplemental_development_flag } }
		random_list = {
			20 = { add_base_tax = 1 }
			80 = { }
		}
	}
	if = {
		limit = { 
			owner = { has_country_modifier = lit_increased_dev_modifier }
		}
		add_base_tax = 1 
	}
	random_events = {
		100 = et_sanamahism.2
		10000 = 0
	}
	if = { 
		limit = { has_state_edict = chinese_industrialization } 
		random_list = {
			10 = { add_base_tax = 1 } 
			10 = { add_prosperity = 1 } 
			10 = { add_province_modifier = { name = qng_center_of_industrialization_modifier duration = 3650 } }
			70 = {  } 
		}
	}
	if = {
		limit = { owner = { has_country_modifier = JAP_cadastral_surveys has_dlc = "Domination" } }
		owner = {
			change_estate_land_share = {
				estate = all 
				share = -0.2
			}
		}
	}
	if = {
		limit = { owner = { has_country_modifier = jap_20_years_devving_tax_yields_twice_bonus_1_burgher_loyalt_modifier } }
		add_base_tax = 1 
		owner = {
			add_estate_loyalty = {
				estate = estate_burghers 
				loyalty = 1 
			}
		}
	}
	
	if = { 
		limit = { 
			owner = { has_country_modifier = pru_victory_lower_saxony_modifier }
			OR = { 
				culture = saxon
				culture = lower_saxon
			}
		}
		add_nationalism = -3
		add_local_autonomy = -5
		add_prosperity = 1
	}
	random_events = {
		100 = et_sanamahism.3
		10000 = 0
	}
}

# province
on_dip_development = {
	on_dip_development_effect = yes

	if = { 
		limit = { 
			owner = { has_country_modifier = pru_victory_lower_saxony_modifier }
			OR = { 
				culture = saxon
				culture = lower_saxon
			}
		}
		add_nationalism = -3
		add_local_autonomy = -5
		add_prosperity = 1
	}
}

# province
on_mil_development = {
	on_mil_development_effect = yes

	if = { 
		limit = { 
			owner = { has_country_modifier = pru_victory_lower_saxony_modifier }
			OR = { 
				culture = saxon
				culture = lower_saxon
			}
		}
		add_nationalism = -3
		add_local_autonomy = -5
		add_prosperity = 1
	}
	random_events = {
		100 = et_sanamahism.4
		10000 = 0
	}
}

on_overextension_pulse = {
	random_events = {
		100 = overextension.1
		100 = overextension.2
		100 = overextension.3
		100 = overextension.4
		100 = overextension.5
		100 = overextension.6
		100 = overextension.7
		100 = overextension.8
		100 = overextension.9
		100 = overextension.10
	}
	#Decadence specific
}


on_colonial_pulse = {

}

on_siberian_pulse = {
}


# country random events

on_monthly_pulse = {
	if = {
		limit = {
			NOT = {
				check_variable = {
					which = oil_sold
					value = 0
				}
			}
		}
		set_variable = {
			which = oil_sold
			value = 0	
		}
	}
}
on_yearly_pulse = {
	if = {
		limit = {
			NOT = { oil = 1 }
			check_variable = { which = oil_production value = 1 }
		}
		set_oil_product = yes
	}
	if = {
		limit = {			
			is_part_of_hre = no
			has_country_modifier = european_union
		}
		eu_leave = yes
	}
}
on_yearly_pulse_2 = {
}
on_yearly_pulse_3 = {
}
on_yearly_pulse_4 = {
}
on_yearly_pulse_5 = {
}

on_bi_yearly_pulse = {

	if = {
		limit = {
			check_variable = { which = bought_oil value = 1 }
		}
		country_event = {
			id = set_variable_oil.1
		}
	}
	if = {
		limit = {
			check_variable = { which = oil_sold value = 1 }
		}
		country_event = {
			id = set_variable_oil.2
		}
	}
	
	random_events = {
		# randomevents.txt


	
		# Old Centralisation/Decentralisation
		


		# Tradegoods events


		# Refoms, when having parliaments.
	

		

		# Sailor events
		

		# Corruption Events


		# Institution Events
		#Feudalism Spread Events:
		150 = institution_events.8
		150 = institution_events.9
		150 = institution_events.10
		150 = institution_events.11
		#Global Trade Spread Events:
		150 = institution_events.50
		150 = institution_events.51
		150 = institution_events.52
		#Enlightenment Spread Events:
		150 = institution_events.70
		150 = institution_events.71
		150 = institution_events.72


		#Personality Events
		50 = personality_events.10 #Just Dilema
		50 = personality_events.11 #A righteous King
		50 = personality_events.12 #A Righteous Republican Ruler
		50 = personality_events.13
		50 = personality_events.14
		50 = personality_events.15
		50 = personality_events.16
		50 = personality_events.17
		50 = personality_events.18
		50 = personality_events.19
		50 = personality_events.20
		50 = personality_events.21
		50 = personality_events.22
		50 = personality_events.23
		50 = personality_events.24
		50 = personality_events.25
		50 = personality_events.26
		50 = personality_events.27
		50 = personality_events.28
		50 = personality_events.29
		50 = personality_events.30
		50 = personality_events.31
		50 = personality_events.32
		50 = personality_events.33
		#50 = personality_events.34
		50 = personality_events.35
		50 = personality_events.36
		50 = personality_events.37
		50 = personality_events.38
		50 = personality_events.39
		50 = personality_events.40
		50 = personality_events.41
		50 = personality_events.42
		50 = personality_events.43
		50 = personality_events.44
		50 = personality_events.45
		50 = personality_events.46
		50 = personality_events.47
		50 = personality_events.48
		50 = personality_events.49
		50 = personality_events.50
		50 = personality_events.51
		50 = personality_events.52
		50 = personality_events.53
		50 = personality_events.54
		50 = personality_events.55
		50 = personality_events.56
		50 = personality_events.57
		50 = personality_events.58

		# Trade League Events
		



		#Confucian Events
		75 = confucian_events.19
		75 = confucian_events.20

		# Orthodox Icon Events
		

		2000 = 0 #was 1250
	}
}

on_bi_yearly_pulse_2 = {
	random_events = {
		100 = corruption_event.1
		100 = corruption_event.2
		100 = corruption_event.3
		100 = corruption_event.4
		100 = corruption_event.5
		100 = corruption_event.6
		100 = corruption_event.7
		100 = corruption_event.8
		100 = corruption_event.9
		100 = corruption_event.10
		200 = corruption_event.11
		200 = corruption_event.12
		200 = corruption_event.13
		200 = corruption_event.14
		200 = corruption_event.15

		4000 = 0
	}
}

on_bi_yearly_pulse_3 = {

	#Fire estate agenda if you have that privilege
	# NOTE DOING THIS THROUGH RANDOM EVENT NOW WITH estate_privileges_and_agendas_events.4 INSTEAD!
	#on_bi_yearly_pulse_estate_privileges_effect = yes

	events = {
		muslim_school_events.20 #Pick School
	}
}

on_bi_yearly_pulse_4 = {
	random_events = { #all these were shifted from on_bi_yearly_pulse_1
		#randomevents

		# Innovativeness
		

		# Trade Company Investments
		

		# Catholic Order Events
		

		
		
		# Papal Tithe Events
		
		
		# Mercenaries
		

		# Espionage
	

		
		# Papacy events
		

		# Professionalism
	
		# Agenda from the Estates

		#ET Political Events
		200 = et_political.3
		400 = et_political.4
		400 = et_political.5
		200 = et_political.6
		200 = et_political.7
		200 = et_political.8
		200 = et_political.9
		200 = et_political.10
		2000 = 0
	}
}

on_bi_yearly_pulse_5 = {
	
}



# country random events
on_thri_yearly_pulse = {
	random_events = {
		# Republics
		




		1000 = 0
	}
}

on_thri_yearly_pulse_2 = {
	random_events = {
		# Random to increase or decrease patriarch authority.
		25 = orthodox_flavor.1
		20 = orthodox_flavor.2
		25 = orthodox_flavor.3
		25 = orthodox_flavor.4
		25 = orthodox_flavor.5
		25 = orthodox_flavor.6

		# Muslim Piety Events
		
		300 = 0
	}
}

on_thri_yearly_pulse_3 = {
	
}

on_thri_yearly_pulse_4 = {
	
}

on_four_year_pulse = {
}

on_four_year_pulse_2 = {
	
}

on_four_year_pulse_3 = {
}

on_four_year_pulse_4 = {
}

on_five_year_pulse = {
	#eu_leader_script_effect = yes
	random_events = {

		# Aristocracy 		13  (8g 5b)
		100 = ideagroups.100
		100 = ideagroups.101
		100 = ideagroups.102
		100 = ideagroups.103
		100 = ideagroups.104
		100 = ideagroups.105
		100 = ideagroups.106
		100 = ideagroups.107
		100 = ideagroups.108
		100 = ideagroups.109
		100 = ideagroups.110
		100 = ideagroups.111
		100 = ideagroups.112


		# Plutocracy 		19 (12g 7b)
		100 = ideagroups.200
		100 = ideagroups.201
		100 = ideagroups.202
		100 = ideagroups.203
		100 = ideagroups.204
		100 = ideagroups.205
		100 = ideagroups.206
		100 = ideagroups.207
		100 = ideagroups.208
		100 = ideagroups.209
		100 = ideagroups.210
		100 = ideagroups.211
		100 = ideagroups.212
		100 = ideagroups.213
		100 = ideagroups.214
		100 = ideagroups.215
		100 = ideagroups.216
		100 = ideagroups.217
		100 = ideagroups.218

		# Innovativenes		11 (7g 4b)
		100 = ideagroups.300
		100 = ideagroups.301
		100 = ideagroups.302
		100 = ideagroups.303
		100 = ideagroups.304
		100 = ideagroups.305
		100 = ideagroups.306
		100 = ideagroups.307
		100 = ideagroups.308
		100 = ideagroups.309
		100 = ideagroups.310

		# Religious		18 (11g 7b)
		100 = ideagroups.400
		100 = ideagroups.401
		100 = ideagroups.402
		100 = ideagroups.403
		100 = ideagroups.404
		100 = ideagroups.405
		100 = ideagroups.406
		100 = ideagroups.407
		100 = ideagroups.408
		100 = ideagroups.409
		100 = ideagroups.410
		100 = ideagroups.411
		100 = ideagroups.412
		100 = ideagroups.413
		100 = ideagroups.414
		100 = ideagroups.415
		100 = ideagroups.416
		100 = ideagroups.417


		# Spy			9 (6g 3b)
		100 = ideagroups.500
		100 = ideagroups.501
		100 = ideagroups.502
		100 = ideagroups.503
		100 = ideagroups.504
		100 = ideagroups.505
		100 = ideagroups.506
		100 = ideagroups.507
		100 = ideagroups.508


		# Diplomatic		9 (6g 3b)
		100 = ideagroups.600
		100 = ideagroups.601
		100 = ideagroups.602
		100 = ideagroups.603
		100 = ideagroups.604
		100 = ideagroups.605
		100 = ideagroups.606
		100 = ideagroups.607
		100 = ideagroups.608


		# Offensive 		14 (9g 5b)
		100 = ideagroups.700
		100 = ideagroups.701
		100 = ideagroups.702
		100 = ideagroups.703
		100 = ideagroups.704
		100 = ideagroups.705
		100 = ideagroups.706
		100 = ideagroups.707
		100 = ideagroups.708
		100 = ideagroups.709
		100 = ideagroups.710
		100 = ideagroups.711
		100 = ideagroups.712
		100 = ideagroups.713


		# Defensive		11 (5g 6b)
		100 = ideagroups.800
		100 = ideagroups.801
		100 = ideagroups.802
		100 = ideagroups.803
		100 = ideagroups.804
		100 = ideagroups.805
		100 = ideagroups.806
		100 = ideagroups.807
		100 = ideagroups.808
		100 = ideagroups.809
		100 = ideagroups.810
		100 = ideagroups.811
		100 = ideagroups.812
		100 = ideagroups.813
		100 = ideagroups.814
		100 = ideagroups.815


		# Trade			6 (7g 4b)
		100 = ideagroups.900
		100 = ideagroups.901
		100 = ideagroups.902
		100 = ideagroups.903
		100 = ideagroups.904
		100 = ideagroups.905
		100 = ideagroups.906
		100 = ideagroups.907
		100 = ideagroups.908
		100 = ideagroups.909
		100 = ideagroups.910

		# Maritime			22 (14g 8b)
		100 = ideagroups.1000
		100 = ideagroups.1001
		100 = ideagroups.1002
		100 = ideagroups.1003
		100 = ideagroups.1004
		100 = ideagroups.1005
		100 = ideagroups.1006
		100 = ideagroups.1007
		100 = ideagroups.1008
		100 = ideagroups.1009
		100 = ideagroups.1010
		100 = ideagroups.1011
		100 = ideagroups.1012
		100 = ideagroups.1013
		100 = ideagroups.1014
		100 = ideagroups.1015
		100 = ideagroups.1016
		100 = ideagroups.1017
		100 = ideagroups.1018
		100 = ideagroups.1019
		100 = ideagroups.1020
		100 = ideagroups.1021

		# Economic		11 (7g 4b)
		100 = ideagroups.1100
		100 = ideagroups.1101
		100 = ideagroups.1102
		100 = ideagroups.1103
		100 = ideagroups.1104
		100 = ideagroups.1105
		100 = ideagroups.1106
		100 = ideagroups.1107
		100 = ideagroups.1108
		100 = ideagroups.1109
		100 = ideagroups.1110

		# Exploration		11 (7g 4b)
		100 = ideagroups.1200
		100 = ideagroups.1201
		100 = ideagroups.1202
		100 = ideagroups.1203
		100 = ideagroups.1204
		100 = ideagroups.1205
		100 = ideagroups.1206
		100 = ideagroups.1207
		100 = ideagroups.1208
		100 = ideagroups.1209
		100 = ideagroups.1210

		# Quality		11 (7g 4b)
		100 = ideagroups.1300
		100 = ideagroups.1301
		100 = ideagroups.1302
		100 = ideagroups.1303
		100 = ideagroups.1304
		100 = ideagroups.1305
		100 = ideagroups.1306
		100 = ideagroups.1307
		100 = ideagroups.1308
		100 = ideagroups.1309
		100 = ideagroups.1310

		# Quantity		11 (7g 4b)
		100 = ideagroups.1400
		100 = ideagroups.1401
		100 = ideagroups.1402
		100 = ideagroups.1403
		100 = ideagroups.1404
		100 = ideagroups.1405
		100 = ideagroups.1406
		100 = ideagroups.1407
		100 = ideagroups.1408
		100 = ideagroups.1409
		100 = ideagroups.1410


		# Expansion		11 (7g 4b)
		100 = ideagroups.1500
		100 = ideagroups.1501
		100 = ideagroups.1502
		100 = ideagroups.1503
		100 = ideagroups.1504
		100 = ideagroups.1505
		100 = ideagroups.1506
		100 = ideagroups.1507
		100 = ideagroups.1508
		100 = ideagroups.1509
		100 = ideagroups.1510

		# Administrative	8 (5g 3b)
		100 = ideagroups.1600
		100 = ideagroups.1601
		100 = ideagroups.1602
		100 = ideagroups.1605
		100 = ideagroups.1606
		100 = ideagroups.1607
		100 = ideagroups.1608
		100 = ideagroups.1609

		# Naval		11 (7g 4b)
		100 = ideagroups.1700
		100 = ideagroups.1701
		100 = ideagroups.1702
		100 = ideagroups.1703
		100 = ideagroups.1704
		100 = ideagroups.1705
		100 = ideagroups.1706
		100 = ideagroups.1707
		100 = ideagroups.1708
		100 = ideagroups.1709
		100 = ideagroups.1710

		# Influence		11 (7g 4b)
		100 = ideagroups.1800
		100 = ideagroups.1801
		100 = ideagroups.1802
		100 = ideagroups.1803
		100 = ideagroups.1804
		100 = ideagroups.1805
		100 = ideagroups.1806
		100 = ideagroups.1807
		100 = ideagroups.1808
		100 = ideagroups.1809
		100 = ideagroups.1810

		# Humanist		11 (7g 4b)
		100 = ideagroups.1900
		100 = ideagroups.1901
		100 = ideagroups.1902
		100 = ideagroups.1903
		100 = ideagroups.1904
		100 = ideagroups.1905
		100 = ideagroups.1906
		100 = ideagroups.1907
		100 = ideagroups.1908
		100 = ideagroups.1909
		100 = ideagroups.1910

		# Horde Ideas		10 (8g 2b)
		100 = ideagroups.1922
		100 = ideagroups.1923
		100 = ideagroups.1924
		100 = ideagroups.1925
		100 = ideagroups.1926
		100 = ideagroups.1927
		100 = ideagroups.1928
		100 = ideagroups.1929
		100 = ideagroups.1930
		100 = ideagroups.1931
		
		#Theocracy Ideas		11 (9g 2b)
		100 = ideagroups.1911
		100 = ideagroups.1912
		100 = ideagroups.1913
		100 = ideagroups.1914
		100 = ideagroups.1915
		100 = ideagroups.1916
		100 = ideagroups.1917
		100 = ideagroups.1918
		100 = ideagroups.1919
		100 = ideagroups.1920
		100 = ideagroups.1921

		# Indigenous		10 (6g 4b)
		100 = ideagroups.1932
		100 = ideagroups.1933
		100 = ideagroups.1934
		100 = ideagroups.1935
		100 = ideagroups.1936
		100 = ideagroups.1937
		100 = ideagroups.1938
		100 = ideagroups.1939
		100 = ideagroups.1940
		100 = ideagroups.1941

		# Infrastructure		10 (5g 5b)
		100 = ideagroups.2000
		100 = ideagroups.2001
		100 = ideagroups.2002
		100 = ideagroups.2003
		100 = ideagroups.2004
		100 = ideagroups.2005
		100 = ideagroups.2006
		100 = ideagroups.2007
		100 = ideagroups.2008
		100 = ideagroups.2009
		
		#Court Events			8 (6g 2b)
		100 = ideagroups.2010
		100 = ideagroups.2011
		100 = ideagroups.2012
		100 = ideagroups.2013
		100 = ideagroups.2014
		100 = ideagroups.2015
		100 = ideagroups.2016
		100 = ideagroups.2017
		
		#Mercenary Ideas		9 (6g 3b)
		100 = ideagroups.2020
		100 = ideagroups.2021

		100 = ideagroups.2025
		100 = ideagroups.2026
		100 = ideagroups.2027
		100 = ideagroups.2028
		
		1000 = 0
	}

	#events = {
	#	seven_cities_events.1000 #Clearing of Seven Cities Hunt when goal is no longer possible
	#}
}


# Estates pulse
on_five_year_pulse_2 = {
	random_events = {
		# Burghers
		
		#ET
		100 = et_estates.1
		400 = et_estates.2
		100 = et_estates.3
		1000 = 0
	}
}

on_five_year_pulse_3 = {
	if = {
		limit = { 
			NOT = { has_country_modifier = european_union } 
			NOT = { has_country_modifier = european_leader }
			any_owned_province = { has_province_flag = capital_europa }
		}
		not_eu_member = yes
	}
	if = {
		limit = {
			NOT = { has_country_modifier = european_union }
			is_part_of_hre = yes
		}
		eu_join = yes
	}
}

on_five_year_pulse_4 = {
	
	#if = { #fail-safe for flavor_pap.7, making religious leagues happen at some point if there is no PAP
	#	limit = {
	#		is_year = 1610
	#		NOT = { exists = PAP }
	#		NOT = { has_global_flag = counter_reformation }
	#	}
	#	set_global_flag = counter_reformation
	#}
	#fail-safe if for whatever reason these flags stay after being used in events
	if = {
		limit = {
			had_country_flag = {
				flag = advisor_events_adm
				days = 720
			}
		}
		clr_country_flag = advisor_events_adm
	}
	if = {
		limit = {
			had_country_flag = {
				flag = advisor_events_dip
				days = 720
			}
		}
		clr_country_flag = advisor_events_dip
	}
	if = {
		limit = {
			had_country_flag = {
				flag = advisor_events_mil
				days = 720
			}
		}
		clr_country_flag = advisor_events_mil
	}
	#Clearing of Jewish events flags
	if = {
		limit = {
			had_country_flag = {
				flag = shalosh_regalim
				days = 365
			}
		}
		clr_country_flag = shalosh_regalim
	}
	event = {
		european_union.6
	}
	if = {
		limit = {
			has_country_modifier = european_union
		}
		every_owned_province = {
			limit = {
				has_province_flag = capital_europa
			}
			clr_province_flag = capital_europa
		}
		capital_scope = {
			set_province_flag = capital_europa
		}
	}
	if = {
		limit = {
			NOT = { has_country_modifier = european_union }
			is_part_of_hre = yes
		}
		capital_scope = {
			set_province_flag = capital_europa
		}
	}

	
}

# El Dorado
on_explore_coast = {
}
on_conquistador_empty = {
}

on_conquistador_native = {
}

on_buy_religious_reform = {
	
}

on_circumnavigation = {
}

on_become_free_city = {
	
}

on_remove_free_city = {
	
}

on_revoke_estate_land_ai = { #AI can't handle the rebels atm or perform a gradual revoke, sorry
	add_province_modifier = {
		name = revoked_estate_modifier
		duration = 5475 #15 years
	}
}

on_revoke_estate_land = {
	add_province_modifier = {
		name = revoked_estate_modifier
		duration = 5475 #15 years
	}
}

on_revoke_estate_land_ai_post = {
	add_local_autonomy = 25
}
on_revoke_estate_land_post = {
	add_local_autonomy = 25
}

on_grant_estate_land = {
	if = {
		limit = {
			has_province_modifier = revoked_estate_modifier
		}
		remove_province_modifier = revoked_estate_modifier
	}
}

on_death_has_harem = {
}

on_select_heir_from_harem = {
}

on_fetishist_cult_change = {
	
	if = {
		limit = {
			has_country_flag = lost_ancestral_lands
			NOT = { has_adopted_cult = zanahary_cult }
			NOT = { has_adopted_cult = central_african_ancestor_cult }
		}
		clr_country_flag = lost_ancestral_lands
	}
}

# country
on_gain_great_power_status = {
	if = {
		limit = {
			NOT = { has_country_flag = became_great_power_flag }
		}
		set_country_flag = became_great_power_flag
	}
}

# country
on_lose_great_power_status = {
}

# province
on_province_religion_converted = {
	on_province_religion_changed_effect = yes
	on_province_religion_converted_effect = yes
	if = {
		limit = { 
			owner = { 
				has_government_attribute = more_25_tax_in_true_faith_provinces
			}
			religion_group = owner 
			NOT = { has_province_modifier = ottoman_siyasah_tax_reform_tax }
		}
		add_province_modifier = {
			name = ottoman_siyasah_tax_reform_tax
			duration = -1
		}
	}
	if = {
		limit = {
			OR = {
				NOT = { 
					owner = { has_government_attribute = more_25_tax_in_true_faith_provinces } 
				}
				NOT = { religion_group = owner }
			}
			has_province_modifier = ottoman_siyasah_tax_reform_tax
		}
		remove_province_modifier = ottoman_siyasah_tax_reform_tax
	}
	if = {
		limit = { 
			owner = { 
				has_government_attribute = more_15_manpower_in_heathen_provinces
			}
			NOT ={ religion_group = owner }
			NOT = { has_province_modifier = ottoman_siyasah_tax_reform_manpower }
		}
		add_province_modifier = {
			name = ottoman_siyasah_tax_reform_manpower
			duration = -1
		}
	}
	if = {
		limit = {
			OR = {
				NOT = { 
					owner = { has_government_attribute = more_15_manpower_in_heathen_provinces } 
				}
				religion_group = owner 
			}
			has_province_modifier = ottoman_siyasah_tax_reform_manpower
		}
		remove_province_modifier = ottoman_siyasah_tax_reform_manpower
	}
}

on_province_religion_changed = {
	on_province_religion_changed_effect = yes
	if = {
		limit = { 
			owner = { 
				has_government_attribute = more_25_tax_in_true_faith_provinces
			}
			religion_group = owner 
			NOT = { has_province_modifier = ottoman_siyasah_tax_reform_tax }
		}
		add_province_modifier = {
			name = ottoman_siyasah_tax_reform_tax
			duration = -1
		}
	}
	if = {
		limit = {
			OR = {
				NOT = { 
					owner = { has_government_attribute = more_25_tax_in_true_faith_provinces } 
				}
				NOT = { religion_group = owner }
			}
			has_province_modifier = ottoman_siyasah_tax_reform_tax
		}
		remove_province_modifier = ottoman_siyasah_tax_reform_tax
	}
	if = {
		limit = { 
			owner = { 
				has_government_attribute = more_15_manpower_in_heathen_provinces
			}
			NOT ={ religion_group = owner }
			NOT = { has_province_modifier = ottoman_siyasah_tax_reform_manpower }
		}
		add_province_modifier = {
			name = ottoman_siyasah_tax_reform_manpower
			duration = -1
		}
	}
	if = {
		limit = {
			OR = {
				NOT = { 
					owner = { has_government_attribute = more_15_manpower_in_heathen_provinces } 
				}
				religion_group = owner 
			}
			has_province_modifier = ottoman_siyasah_tax_reform_manpower
		}
		remove_province_modifier = ottoman_siyasah_tax_reform_manpower
	}
}

# province, manually conversion
on_province_culture_converted = {
	on_province_culture_converted_estate_privilges_effect = yes
	judaism_on_province_culture_converted_effect = yes
	imperial_modifiers_on_province_change_culture_or_change_owner_effect = yes
	on_province_culture_change_effect = yes
}

# province, general conversion through effects
on_province_culture_changed = {
	on_province_culture_converted_estate_privilges_effect = yes
	judaism_on_province_culture_converted_effect = yes
	imperial_modifiers_on_province_change_culture_or_change_owner_effect = yes
	on_province_culture_change_effect = yes
}

# THIS = Province, FROM = Country who Propogated
on_convert_by_trade_policy = {
	if = {
		limit = {
			#trade_company_region = trade_company_moluccas
			FROM = { is_defender_of_faith = yes }
		}
		FROM = {
			if = {
				limit = {
					ai = no
					NOT = { check_variable = { which = religion_propagated_in_moluccas value = 1 } }
				}
				set_variable = {
					which = religion_propagated_in_moluccas value = 1
				}
			}
			else_if = {
				limit = {
					ai = no
					check_variable = { which = religion_propagated_in_moluccas value = 1 }
					NOT = { check_variable = { which = religion_propagated_in_moluccas value = 6 } }
				}
				change_variable = {
					which = religion_propagated_in_moluccas value = 1
				}
			}
		}
	}
}

# province
# FROM = old owner
on_province_owner_change = {
	
	on_province_owner_change_government_effect = yes
	#events = {
	#	japan.1			#Fall of the current Shogun
	#}
	if = {
		limit = {
			NOT = { owner = { religion_group = muslim } }
			has_province_modifier = sufi_shrine
		}
		remove_province_modifier = sufi_shrine
	}
	on_province_owner_change_estate_privileges_effect = yes
	imperial_modifiers_on_province_change_culture_or_change_owner_effect = yes
	
	if = {
		limit = {
			region = indo_china_region
			trade_goods = grain
			owner = { 
				NOT = {
					OR = {
						has_estate = estate_vaisyas
						has_estate = estate_burghers
					}
				}
			}
		}
		add_province_modifier = {
			name = grain_production_improved
			duration = 7300
		}
	}

	if = {
		limit = {
			trade_goods = gold
			NOT = { has_province_modifier = estate_burghers_control_over_gold_mine }
			owner = {
				has_estate_privilege = estate_burghers_control_over_the_mint
			}
		}
		add_province_modifier = {
			name = estate_burghers_control_over_gold_mine
			duration = -1
		}
	}
	if = {
		limit = {
			owner = {
				has_country_modifier = son_fetishism_as_secondary_religion
			}
			religion = shamanism
			NOT = { has_province_modifier = son_fetishism_as_secondary_religion_province }
		}
		add_province_modifier = {
			name = son_fetishism_as_secondary_religion_province
			duration = -1
			desc = son_fetishism_as_secondary_religion_province_desc
		}
	}
	
	if = {
		limit = {
			province_id = 379
			owner = {
				NOT = { religion = jewish }
			}
		}
		remove_country_modifier = third_temple_country_modifier
	}
	else_if = {
		limit = {
			OR = {
				owner = {
					NOT = { has_country_modifier = son_fetishism_as_secondary_religion }
				}
				NOT = { religion = shamanism }
			}
			has_province_modifier = son_fetishism_as_secondary_religion_province
		}
		remove_province_modifier = son_fetishism_as_secondary_religion_province
	}
	if = { 
		limit = { 
			owner = { NOT = { has_reform = jap_gokaido_reform } }
		}
		remove_province_modifier = jap_gokaido_modifier
	}
	if = {
		limit = { 
			owner = { 
				has_government_attribute = more_15_manpower_in_heathen_provinces
			}
			NOT ={ religion_group = owner }
			NOT = { has_province_modifier = ottoman_siyasah_tax_reform_manpower }
		}
		add_province_modifier = {
			name = ottoman_siyasah_tax_reform_manpower
			duration = -1
		}
	}
	if = {
		limit = { 
			owner = { 
				has_government_attribute = more_15_manpower_in_heathen_provinces
			}
			NOT ={ religion_group = owner }
			NOT = { has_province_modifier = ottoman_siyasah_tax_reform_manpower }
		}
		add_province_modifier = {
			name = ottoman_siyasah_tax_reform_manpower
			duration = -1
		}
	}
}

# country
on_parliament_debate_reset = {
	on_parliament_debate_reset_effect = yes
}

#province
on_parliament_seat_given = {
	on_parliament_seat_given_effect = yes
}

#province
on_parliament_seat_lost = {
	on_parliament_seat_lost_effect = yes
}

# country
on_parliament_debate_failed = {
	on_parliament_debate_failed_effect = yes
}

# country
on_parliament_debate_succeeded = {
	on_parliament_debate_succeeded_effect = yes
	increase_issue_passed_counter = yes
}

# country
on_harmonized_pagan = {
	on_harmonized_effect = yes
	events = {
		confucian_events.1
	}
}
on_harmonized_christian = {
	on_harmonized_effect = yes
	events = {
		confucian_events.2
	}
}
on_harmonized_muslim = {
	on_harmonized_effect = yes
	events = {
		confucian_events.3
	}
}
on_harmonized_jewish_group = {
	on_harmonized_effect = yes
	events = {
		confucian_events.5
	}
}
on_harmonized_zoroastrian_group = {
	on_harmonized_effect = yes
	events = {
		confucian_events.6
	}
}
on_harmonized_dharmic = {
	on_harmonized_effect = yes
	events = {
		confucian_events.4
	}
}
on_harmonized_mahayana = {
	on_harmonized_effect = yes
	events = {
		confucian_events.9
	}
}
on_harmonized_buddhism = { #Theravada
	on_harmonized_effect = yes
	events = {
		confucian_events.8
	}
}
on_harmonized_shinto = {
	on_harmonized_effect = yes
	events = {
		confucian_events.7
	}
}
on_harmonized_vajrayana = {
	on_harmonized_effect = yes
	events = {
		confucian_events.10
	}
}
on_harmonized_tibetan_bon = {
	on_harmonized_effect = yes
	events = {
		et_china.2
	}
}
on_harmonized_muism = {
	on_harmonized_effect = yes
	events = {
		et_china.3
	}
}
on_harmonized_tengri_pagan_reformed = {
	on_harmonized_effect = yes
	events = {
		et_china.4
	}
}
on_harmonized_satsana_phi = {
	on_harmonized_effect = yes
	events = {
		et_china.13
	}
}
on_harmonized_hellenic = {
	on_harmonized_effect = yes
	events = {
		et_china.5
	}
}
on_harmonized_secular = {
	on_harmonized_effect = yes
	events = {
		et_china.6
	}
}
on_harmonized_american_pagan = {
	on_harmonized_effect = yes
	events = {
		et_china.7
	}
}
on_harmonized_slavic_pagan = {
	on_harmonized_effect = yes
	events = {
		et_china.8
	}
}
on_harmonized_german_pagan = {
	on_harmonized_effect = yes
	events = {
		et_china.9
	}
}
on_harmonized_african_pagan = {
	on_harmonized_effect = yes
	events = {
		et_china.10
	}
}
on_harmonized_mesopotamian = {
	on_harmonized_effect = yes
	events = {
		et_china.11
	}
}
on_harmonized_buddhic = {
	on_harmonized_effect = yes
	events = {
		et_china.12
	}
}
on_harmonized_confucianism = {
	on_harmonized_effect = yes
	events = {
		confucian_events.14
	}
}
# country

# province
on_consecrate_patriarch = {
	if = {
		limit = {
			owner = { has_country_flag = has_improved_consecration }
		}
		every_province_in_state = {
			limit = { has_state_patriach = yes }
			add_province_modifier = {
				name = consecrated_ground
				duration = -1
				hidden = yes
			}
		}
	}
}

# country. from = overlord
on_accept_tribute = {
}

# country. from = overlord
on_refuse_tribute = {
}

# country
on_leader_recruited = {
	
	if = {
		limit = {
			has_estate_privilege = estate_nobles_command_of_the_military
		}
		add_estate_influence_modifier = {
			estate = estate_nobles
			influence = 5
			duration = 3650
			desc = EST_VAL_NOBLE_LEADER
		}
	}
	if = {
		limit = { has_government_attribute = theocratic_monarchy_mechanic }
		change_statists_vs_orangists = 0.01
	}
}

# country
on_general_recruited = {	
	on_general_recruited_effect = yes
}

# country
on_admiral_recruited = {
	if = {
		limit = { has_country_flag = admirals_give_army_professionalism }
		add_army_professionalism = 0.005
	}
	if = {
		limit = { 
			OR = {
				has_country_modifier = pol_global_maritime_empire_modifier 
				has_country_modifier = pol_global_maritime_empire_2_modifier
			}
		}
		add_navy_tradition = 1 
	}
}

# country
on_conquistador_recruited = {
}

# country
on_explorer_recruited = {
	if = {
		limit = { 
			OR = {
				has_country_modifier = pol_global_maritime_empire_modifier 
				has_country_modifier = pol_global_maritime_empire_2_modifier
			}
		}
		add_navy_tradition = 1 
	}
}

# THIS = Province, FROM = Country
on_regiment_recruited = {
	
}

# THIS = Province, FROM = Country, ROOT = Merc Unit
on_mercenary_recruited = {
	if = {
		limit = { ai = no }
		on_mercenary_recruited_effect = yes
	}
}
# THIS = One province in the state
on_add_pasha = {
	hidden_effect = {
		owner = {
			save_event_target_as = province_owner
		}
	}
	if = {
		limit = {
			event_target:province_owner = {
				has_country_flag = tur_improved_pashas
			}
		}
		area = {
			limit = { owned_by = event_target:province_owner NOT = { culture_group = event_target:province_owner } }
			add_province_modifier = { name = tur_competent_pashas duration = -1 }
		}
	}
	#if = {
	#	limit = {
	#		event_target:province_owner = {
	#			has_government_attribute = pasha_extra_bonuses
	#		}
	#	}
	#	area = {
	#		limit = { owned_by = event_target:province_owner NOT = { culture_group = event_target:province_owner } }
	#		add_province_modifier = { name = the_provincial_system duration = -1 }
	#	}
	#}
}



# THIS = One province in the state
on_remove_pasha = {
	hidden_effect = {
		owner = {
			save_event_target_as = province_owner
		}
	}

	area = {
		limit = { owned_by = event_target:province_owner }
		add_or_extend_province_modifier_effect = { MODIFIER = pasha_removed_modifier DURATION = 3650 }
		if = {
			limit = { has_province_modifier = tur_competent_pashas }
			remove_province_modifier = tur_competent_pashas
		}
		if = {
			limit = { has_province_modifier = the_provincial_system }
			remove_province_modifier = the_provincial_system
		}
	}
}

# THIS = Province
on_janissaries_raised = {
}

on_cawa_raised = {
}

on_carolean_raised = {
}

on_hussars_raised = {
}

on_revolutionary_guard_raised = {
}

on_banner_raised = {
	owner = { 
		if = { 
			limit = { has_country_flag = refund_partial_corruption_on_banner_recruited_flag }
			add_corruption = -0.1
		}
	}
}
on_cossack_raised = {
}

on_marine_raised = {
}

on_rajput_raised = {
}

on_streltsy_raised = {
}

on_tercio_raised = {
}

on_musketeer_raised = {
}

on_samurai_raised = {
}

on_qizilbash_raised = {
}

on_mamluks_raised = {
}

on_geobukseon_raised = {
}

on_reform_enacted = {
}

on_reform_changed = {
}

on_trade_company_investment = {
}

on_center_of_trade_upgrade = {
	if = {
		limit = { owner = { has_country_flag = enable_upgrading_centers_of_trade_dev } }
		add_base_production = 1 
	}
}

on_center_of_trade_downgrade = {
	if = {
		limit = { owner = { has_country_flag = enable_upgrading_centers_of_trade_dev } }
		add_base_production = -1 
	}
}

on_culture_promoted = {
	on_culture_promoted_estate_privileges_effect = yes
	judaism_on_culture_country_effect = yes
	imperial_modifiers_on_culture_country_effect = yes
	GER_on_culture_promoted = yes
	if = { 
		limit = { has_country_flag = reduce_ae_from_prom_cultures_flag }
		every_country = {
			add_aggressive_expansion = {
				who = ROOT 
				value = -3
				apply_calc = no 
			}
		}
	}

}

on_culture_demoted = {
	on_culture_demoted_estate_privileges_effect = yes
	judaism_on_culture_country_effect = yes
	imperial_modifiers_on_culture_country_effect = yes
	on_culture_demoted_effect = yes
	GER_on_culture_demoted = yes
}

on_primary_culture_changed = {
	on_primary_culture_changed_effect = yes
	on_primary_culture_changed_privileges_effect = yes
	judaism_on_culture_country_effect = yes
	imperial_modifiers_on_primary_culture_change_effect = yes
}

# FROM = Previous Country, ROOT = Province
on_company_chartered = {
	
}

# ROOT = Overlord, FROM = Minor
on_dependency_gained = {
	on_dependency_gained_effect = yes
}

# ROOT = Overlord, FROM = Minor
on_dependency_lost = {
	if = {
		limit = {
			has_country_modifier = mng_tibetan_horses_monopoly_modifier
		}
		remove_country_modifier = mng_tibetan_horses_monopoly_modifier
	}
	if = {
		limit = {
			has_country_modifier = tur_tatar_vanguard_modifier
			FROM = { 
				tag = CRI 
				NOT = { is_subject_of = ROOT }
			}
		}
		remove_country_modifier = tur_tatar_vanguard_modifier
	}
	if = {
		limit = {
			has_country_modifier = rus_grand_duke_of_finland
			FROM = { tag = FIN }
		}
		remove_country_modifier = rus_grand_duke_of_finland
	}
	FROM = {
		if = {
			limit = { has_country_modifier = revoked_war_rights }
			remove_country_modifier = revoked_war_rights
		}
	}
}

# ROOT = New vassal, FROM = Overlord
on_create_vassal = {
	on_religion_change_estate_privileges_effect = yes
	if = {
		limit = {
			has_dlc = "Emperor"
			FROM = {
				is_revolutionary = yes
			}
		}
		change_government = republic
		add_government_reform = junior_revolutionary_republic_reform
		set_country_flag = had_revolution
	}
	if = {
		limit = {
			tag = PAP
		}
		change_government = theocracy
		add_government_reform = papacy_reform
		adopt_reform_progress = FROM
	}
	if = {
		limit = { NOT = { is_year = 1445 } }
		set_country_flag = released_in_1444
	}
}

# ROOT = Country establishing it
# First province in state is set
on_holy_order_established = {

}

# When a minority is expelled to a colony
# THIS = Colony, ROOT = Colony, FROM = Home province
on_minority_expelled = {
	FROM = {
		remove_province_modifier = religious_zeal_at_conv
		add_permanent_province_modifier = {
			name = expelled_minority_home
			duration = 7300
		}
	}
}

# THIS = Raiding country, FROM = Sea province
on_raid_coast = {
	if = {
		limit = {
			has_faction = pr_buccaneers
		}
		add_faction_influence = {
			faction = pr_buccaneers
			influence = 1
		}
	}
	if = {
		limit = {
			has_government_attribute = raiding_increases_pp
		}
		add_power_projection = {
			type = high_sea_power_projection
			amount = 1
		}
	}
	if = {
		limit = {
			has_mission = dan_raid_the_north_sea
			NOT = { mission_completed = dan_raid_the_north_sea } 
		}
		change_variable = {
			which = num_of_raided_coasts
			value = 1
		}
	}
}

# ROOT = Tag that captured the flagship, FROM = Tag that lost the flagship
on_flagship_captured = {
	FROM = {
		set_country_flag = captured_flagship_country_flag
	}
	ROOT = {
		country_event = { id = flagship_events.2 }
		set_country_flag = trophy_hunter_flag
	}
	FROM = {
		country_event = { id = flagship_events.1 }
	}
	FROM = { 
		if = { 
			limit = { has_country_modifier = hsa_pride_eagle_of_the_fleet_modifier }
			remove_country_modifier = hsa_pride_eagle_of_the_fleet_modifier
		}
	}
}

# ROOT = Tag that destroyed the flagship, FROM = Tag that lost the flagship
on_flagship_destroyed = {
	FROM = {
		set_country_flag = sunk_flagship_country_flag
	}
	ROOT = {
		country_event = { id = flagship_events.4 }
	}
	FROM = {
		country_event = { id = flagship_events.3 }
	}
	FROM = { 
		if = { 
			limit = { has_country_modifier = hsa_pride_eagle_of_the_fleet_modifier }
			remove_country_modifier = hsa_pride_eagle_of_the_fleet_modifier
		}
	}
}

# this = Released country, FROM = Releasing country
on_country_released = {
	if = {
		limit = {
			tag = PAP
		}
		change_government = theocracy
		change_religion = catholic
		add_government_reform = papacy_reform
		adopt_reform_progress = FROM
	}
	if = {
		limit = {
			FROM = { has_reform = religious_permanent_revolution_reform }
			NOT = { tag = PAP }
		}
		change_religion = FROM
		adopt_reform_progress = FROM
		add_country_modifier = {
			name = global_holy_war_released_modifier
			duration = 3650
			hidden = yes
		}
		capital_scope = {
			change_religion = FROM
		}
	}
	if = {
		limit = { NOT = { is_year = 1445 } }
		set_country_flag = released_in_1444
	}
}

# ROOT = province, FROM = country
on_trade_good_changed = {
	on_trade_good_changed_estate_privileges_effect = yes
	on_trade_good_changed_government_effect = yes
	ROOT = {
		if = {
			limit = { 
				trade_goods = coal 
				FROM = { economic_ideas = 3 }
				has_manufactory_trigger = yes 
				base_production = 2
			}
		}
		add_base_production = -1 
	}
}

# this = country
on_loan_repaid = {
	on_loan_repaid_estate_privileges_effect = yes
	if = {
		limit = { 
			THIS = {
				economic_ideas = 4 
			}
		}
		THIS = { add_inflation = -0.05 }
	}
}

# this = country
on_rebels_break_country = {
	add_country_modifier = {
		name = just_lost_to_rebels
		duration = 10
		hidden = yes
	}
}

# this = country
## Fires when you fire or replace your ADM advisor, in the moment before they are actually removed from their post.
## Note: Defining a new advisor here will result in the shortest appointment in history. Use on_post_adm_advisor_fired instead :)
on_pre_adm_advisor_fired = {
	if = {
		limit = {
			has_country_flag = need_to_fire_adm_advisor
		}
		set_country_flag = just_fired_adm_advisor
		remove_advisor_by_category_no_action = ADM
	}
}

# this = country
on_pre_dip_advisor_fired = {
	if = {
		limit = {
			has_country_flag = need_to_fire_dip_advisor
		}
		set_country_flag = just_fired_dip_advisor
		remove_advisor_by_category_no_action = DIP
	}
}

# this = country
on_pre_mil_advisor_fired = {
	if = {
		limit = {
			has_country_flag = need_to_fire_mil_advisor
		}
		set_country_flag = just_fired_mil_advisor
		remove_advisor_by_category_no_action = MIL
	}
}

# this = country
on_post_adm_advisor_fired = {
	on_advisor_removed_effct = { type = adm }
}

# this = country
on_post_dip_advisor_fired = {
	on_advisor_removed_effct = { type = dip }
}

# this = country
on_post_mil_advisor_fired = {
	on_advisor_removed_effct = { type = mil }
}

# this = new client state, from = parent country
on_create_client_state = {
	if = { 
		limit = { 
			FROM = { mission_completed = fra_grande_armee }
		}
		FROM = {
			add_power_projection = {
				type = mission_rewards_power_projection
				amount = 10
			}
		}
	}
}

# this = new target, from = previous target (both can be non-existent tag)
on_change_revolution_target = {
	
}

# this = curia controller (enactor of the bull)
on_golden_bull_enacted = {
	set_country_flag = enacted_golden_bull
	if = {
		limit = { 
			FRA = { has_country_flag = fu_gain_25_random_pp_and_10_pi_per_bull_flag } 
		}
		FRA = {
			random_list = {
				10 = { add_adm_power = 25 }
				10 = { add_dip_power = 25 }
				10 = { add_mil_power = 25 }
			}
			add_papal_influence = 10 
		}
	}
}


# province:  spawned whenever a new owner takes over the province
# FROM = The previous owner.
on_conquest = {
	on_conquest_effect = yes
}

on_country_creation = {
	if = {
		limit = {
			tag = PAP
			OR = {
				NOT = {
					religion = catholic
				}
				NOT = {
					has_reform = papacy_reform
				}
				NOT = {
					government = theocracy
				}
			}
		}
		change_religion = catholic
		change_government = theocracy
		add_government_reform = papacy_reform
	}
}

on_federation_leader_change = {
	if = {
		limit = { tag = FROM }
		disband_federation = THIS
	}
	else = {
		# New strongest member becomes the new federation leader
		set_federation_leader = THIS
	}
}

#FROM = country pillaged, ROOT = country doing the pillaging
on_pillaged_capital = {
	slave_raid_pillage_capital_effect = yes
}

#FROM = country dev was transferred from, ROOT = country doing the transferring
on_transfer_development = {
}

on_colonial_type_change = {
	clr_country_flag = encourage_cash_crops_flag
}

on_estate_led_regency = {
	if = {
		limit = {
			has_government_attribute = improved_nobles_regency
			OR = {
				has_estate = estate_nobles
				AND = {
					NOT = { has_estate = estate_nobles }
					OR = {
						has_estate = estate_maratha
						has_estate = estate_rajput
					}
				}
			}
		}
		add_ruler_modifier = {
			name = empowered_regency_modifier
			duration = -1
		}
		change_adm = 1
		change_dip = 1
		change_mil = 1
	}
	if = { 
		limit = { 
			has_country_flag = jap_regency_ga_flag 
			has_estate_led_regency = { estate = estate_nobles } 
		}
		add_ruler_modifier = { 
			name = golden_era_bushi_modifier
			duration = -1 
		}
	}
}

on_colony_established = {
}

#scope = new country, FROM = parent country
on_colonial_nation_established = {
}

on_estate_led_regency_surpassed = {
	if = {
		limit = {
			num_of_powerful_estates = 1
			has_estate_led_regency = {
				estate = any
			}
			NOT = {
				estate_led_regency_influence = 70
			}
			OR = {
				AND = {
					has_estate_led_regency = {
						estate = estate_burghers
					}
					NOT = {
						has_estate_loyalty_modifier = {
							estate = estate_church
							modifier = REFUSED_REGENCY
						}
					}
					NOT = {
						has_estate_loyalty_modifier = {
							estate = estate_nobles
							modifier = REFUSED_REGENCY
						}
					}
				}
				AND = {
					has_estate_led_regency = {
						estate = estate_church
					}
					NOT = {
						has_estate_loyalty_modifier = {
							estate = estate_burghers
							modifier = REFUSED_REGENCY
						}
					}
					NOT = {
						has_estate_loyalty_modifier = {
							estate = estate_nobles
							modifier = REFUSED_REGENCY
						}
					}
				}
				AND = {
					has_estate_led_regency = {
						estate = estate_nobles
					}
					NOT = {
						has_estate_loyalty_modifier = {
							estate = estate_burghers
							modifier = REFUSED_REGENCY
						}
					}
					NOT = {
						has_estate_loyalty_modifier = {
							estate = estate_church
							modifier = REFUSED_REGENCY
						}
					}
				}
			}
		}
		country_event = { id = estate_regency_events.1 }
	}
}

on_extended_regency = {
}

on_estate_removed = {
	if = {
		limit = {
			has_country_modifier = dhimmi_building_restrictions
			NOT = {
				has_estate = estate_dhimmi
			}
		}
		remove_country_modifier = dhimmi_building_restrictions
	}
	if = {
		limit = {
			has_country_modifier = swe_debt_with_the_clergy
			NOT = { has_estate = estate_church }
		}
		remove_country_modifier = swe_debt_with_the_clergy
	}
	if = {
		limit = {
			has_country_modifier = swe_debt_with_the_burghers
			NOT = { has_estate = estate_burghers }
		}
		remove_country_modifier = swe_debt_with_the_burghers
	}
	if = {
		limit = {
			has_country_modifier = swe_debt_with_the_nobles
			NOT = { has_estate = estate_nobles }
		}
		remove_country_modifier = swe_debt_with_the_nobles
	}
}

on_colonist_boosting_colony = {
	on_colonist_boosting_colony_effect = yes
}

#ROOT = converted country, FROM = country which force converts ROOT, on_action gets called on Force religion peace and Enforce Religion subject interaction
on_force_conversion = {
	on_force_conversion_effect = yes
}

on_institution_embracement = {
	if = {
		limit = {
			has_government_attribute = monarch_power_on_institutions
		}
		add_adm_power = 100
		add_dip_power = 100
		add_mil_power = 100
	}
}
on_national_focus_change = {}
on_capital_moved = {
	on_capital_moved_effect = yes
}

#ROOT = province that was expanded in, FROM = country that did it
on_expanded_infrastructure = {
}

#ROOT = province that was centralized in
on_centralized_state = {
	if = {
		limit = {
			owner = { has_government_attribute = centralize_state_no_reform_cost }
		}
		owner = {
			add_adm_power = 50
			change_government_reform_progress = 50
		}
	}
	if = {
		limit = {
			owner = { has_government_attribute = centralize_state_development }
		}
		area = {
			limit = {
				owned_by = ROOT
			}
			random_list = {
				1 = { add_base_tax = 1 }
				1 = { add_base_production = 1 }
				1 = { add_base_manpower = 1 }
			}
		}
	}
}

 
#ROOT = country
monarch_on_shipwreck = {
}
heir_on_shipwreck = {
}
consort_on_shipwreck = {
}

#ROOT = country
on_defender_of_faith_loss = {
	on_defender_of_faith_loss_effect = yes
}
on_defender_of_faith_claim = {
	on_defender_of_faith_claim_effect = yes
}
on_hre_dismantled = {
	if = {
		limit = { has_country_flag = fra_shed_the_blood_of_the_saxon_man_flag }
		clr_country_flag = fra_shed_the_blood_of_the_saxon_man_flag
		set_country_flag = fra_fufujoni_flag
		swap_non_generic_missions = yes
	}
}
on_new_age = {
	remove_all_age_timed_modifiers = yes
	set_age_passed_global_flag = yes
	if = {
		limit = {
			OR = {
				has_country_modifier = rise_of_the_ottomans
				has_country_modifier = zenith_of_the_ottomans
				has_country_modifier = twilight_of_the_ottomans
				has_country_modifier = decline_of_the_ottomans
			}
		}
		remove_country_modifier = rise_of_the_ottomans
		remove_country_modifier = zenith_of_the_ottomans
		remove_country_modifier = twilight_of_the_ottomans
		remove_country_modifier = decline_of_the_ottomans
	}
	if = {
		limit = {
			has_government_mechanic = ottoman_decadence_mechanic
			current_age = age_of_discovery
		}
		add_country_modifier = {
			name = rise_of_the_ottomans
			duration = -1
			desc = until_end_of_age_desc
		}
	}
	if = {
		limit = {
			has_government_mechanic = ottoman_decadence_mechanic
			current_age = age_of_reformation
		}
		add_country_modifier = {
			name = zenith_of_the_ottomans
			duration = -1
			desc = until_end_of_age_desc
		}
	}
	if = {
		limit = {
			has_government_mechanic = ottoman_decadence_mechanic
			current_age = age_of_absolutism
		}
		add_country_modifier = {
			name = twilight_of_the_ottomans
			duration = -1
			desc = until_end_of_age_desc
		}
	}
	if = {
		limit = {
			has_government_mechanic = ottoman_decadence_mechanic
			current_age = age_of_revolutions
		}
		add_country_modifier = {
			name = decline_of_the_ottomans
			duration = -1
			desc = until_end_of_age_desc
		}
	}
}

#ROOT = province
on_adm_exploited = {
	if = {
		limit = { owner = { has_government_attribute = may_not_reduce_tax_on_exploitation } }
		random = {
			chance = 50
			add_base_tax = 1
		}
	}
	if = {
		limit = { owner = { has_government_attribute = may_not_reduce_tax_on_own_exploitation culture_group = ROOT } }
		random = {
			chance = 25
			add_base_tax = 1
		}
	}
	if = {
		limit = { owner = { has_government_attribute = may_not_reduce_tax_on_foreign_exploitation NOT = { culture_group = ROOT } } }
		random = {
			chance = 50
			add_base_tax = 1
		}
	}
}
on_dip_exploited = {
}
on_mil_exploited = {
}
on_raze = {
	add_permanent_province_modifier = {
		name = province_razed
		duration = 7300
	}
}
on_concentrate_development = {
	if = { 
		limit = { 
			owner = { has_country_modifier = fra_french_isles_modifier }
		}
		add_nationalism = -5
	}
}

on_slacken_start = {
	add_country_modifier = {
		name = slackening_modifier
		duration = -1
	}
}
on_slacken_stop = {
	remove_country_modifier = slackening_modifier
}

on_colony_finished = { #ROOT - Province
	on_colony_finished_effect = yes
}
on_advisor_hired = { #ROOT - Country

}

on_adm_advisor_hired = { #ROOT - Country, executed after on_advisor_hired!

}

on_dip_advisor_hired = { #ROOT - Country, executed after on_advisor_hired!

}

on_mil_advisor_hired = { #ROOT - Country, executed after on_advisor_hired!

}

on_core = { #ROOT - Province, #FROM - Country that gets the core

}

on_tech_taken = { #ROOT - Country

}

on_adm_tech_taken = { #ROOT - Country, executed after on_tech_taken!

}

on_dip_tech_taken = { #ROOT - Country, executed after on_tech_taken!

}

on_mil_tech_taken = { #ROOT - Country, executed after on_tech_taken!

} 

on_barrage = { #ROOT - barraging country, FROM - barraged province 

}

on_naval_barrage = { #ROOT - barraging country, FROM - barraged province 

}

on_scorch_earth  = { #ROOT - scorching country, FROM - scorched province

}

on_war_ended = { #ROOT - Winer FROM - Loser
	
}

on_alliance_broken = { #ROOT - Original alliance creator, FROM - Alliance accepter
	on_alliance_broken_effect = yes
}

on_royal_marriage_broken = { #ROOT - Original marriage creator, FROM - Marriage accepter

}

on_alliance_created = { #ROOT - Alliance sender, FROM - Alliance accepter

}

on_royal_marriage = { #ROOT - Marraige sender, FROM - marriage accepter
}
on_heir_disinherited = {
	on_heir_disinherited_or_death_effect = yes
}
on_overrun = { #ROOT - winner, FROM - loser, on stackwipe
	if = {
		limit = {
			ROOT = {
				has_government_attribute = army_tradition_on_stackwipe
			}
		}
		ROOT = {
			add_army_tradition = 0.1
		}
	}
}